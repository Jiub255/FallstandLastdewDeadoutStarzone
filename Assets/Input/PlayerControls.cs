//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""2dbd04b7-f51f-4f7e-a0ea-3859d12ba948"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""bdc4a67b-76dc-4e2a-882c-f6fadaf844fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9e4ee24a-25ed-4ccb-990c-9e119d94c764"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a4bed4d-b1d3-47c0-ae27-f59101564d0f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""501b6ea6-996d-406b-80d7-2528df785ac7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b8e9eee5-3ef7-4d13-8bdc-ed341be11428"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""287af1cd-5f2a-4b34-9abe-be23c7a7a191"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd7e287c-0e2a-4409-b540-5207d3b6f422"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dd20627-57ce-4095-aca7-577f36f4ed66"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dd87fa7-91ad-4eb1-bfc3-3db6627dd992"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""7956f101-0178-41b3-8708-d9329dea2e3b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cc748415-2b94-4c6a-9f35-0ddd68a0ebac"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""69e66235-992d-4bba-8628-8873c1e0c0e7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""61210fcd-980f-4f0e-813b-e26c5c9f9ae7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""32a8f321-caf7-4900-9b97-a136ea12601b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""a6c42d42-ce99-4fff-a387-a84ff2dc2941"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5c1400b9-1665-4a9c-8826-6a44ca86bf80"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""39857c28-2238-4096-87d3-f0f9b356dae3"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1a11018b-8b91-4092-85dd-f71939f1c5ac"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""22e0b03f-e359-4702-8ea7-4e69bb2be0d0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e1e2e7f3-ed34-4e03-93b5-d80cdc54c677"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18d76389-6172-42bb-8830-e132bd217eca"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""World"",
            ""id"": ""333d6583-af7b-4463-bb89-dc12b7cdb113"",
            ""actions"": [
                {
                    ""name"": ""SelectOrCenter"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d9dbc16e-6f7f-4ade-841f-101da8ed1cbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ddf5f10a-395c-45c8-9d1b-6ccd85069eb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f3e816c-5b4b-4853-b838-6d6a63bc4945"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""SelectOrCenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""221af38a-3834-4993-9dfc-36dd36dbb571"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Build"",
            ""id"": ""56cb6db7-c3d5-4d97-b886-7279867bfbdd"",
            ""actions"": [
                {
                    ""name"": ""DeselectBuilding"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a5e667eb-bed4-42cb-b3ec-7c9db8b47a0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBuilding"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9a3e82be-af03-4d90-b3bf-0f4dcf47a75d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SnapBuilding"",
                    ""type"": ""PassThrough"",
                    ""id"": ""be286cfd-8a5a-4666-899c-38e5458e7d98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceBuilding"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5d789d10-f4a6-4085-af61-ae45c7d6c83d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a077c862-2d2e-48ec-a061-8f48ad4fd088"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""DeselectBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cd78c3d9-8c49-4316-bb61-dec5f2d3dde2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBuilding"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""923ebce1-6931-4af6-9959-3169c489d14e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""RotateBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""94a04d72-9ace-4bb1-b8de-1b504592aebd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""RotateBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1decab37-605a-4a8b-bd66-589966450faa"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""SnapBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91a54552-616f-4319-8061-43b086250f40"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""PlaceBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Quit"",
            ""id"": ""cebf6a23-b35c-43ac-913b-4269ea46e868"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7a2d45b8-4cbc-4897-8a24-3dde2d6fb62f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e5fec9b9-a1c7-4739-bb9f-2ec81b920d29"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryMenu"",
            ""id"": ""e1054432-fc96-4adc-90c2-a02c236d23ad"",
            ""actions"": [
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f2573d91-4d74-48ae-aeb5-53914fb1f639"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseInventory"",
                    ""type"": ""PassThrough"",
                    ""id"": ""196e871f-fc3c-4f2b-ad2c-b6088657a810"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""23a489d5-5fcb-4659-8d8c-44bf875a237b"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6e340e4-156c-47e8-9a80-d8874e090866"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5707e521-400f-42ed-8494-6cf9ea56464d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BuildCraftingMenus"",
            ""id"": ""89065333-d518-4ec8-9f13-b660d8239f08"",
            ""actions"": [
                {
                    ""name"": ""OpenBuildMenu"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1e3cb696-bbe2-4580-91c9-312c87fb25d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseBuildMenu"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6bcbbdc5-71aa-4892-820c-46730b913815"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenCraftingMenu"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3078849f-f965-4e22-9200-8f318d2d6763"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseCraftingMenu"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c6189075-5c60-46b3-b67e-5c3980e24add"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f1ff7aa-610c-497d-8a39-0a1c03411c57"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenBuildMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""926ed22f-608e-46dc-a9f2-f75a1fc017a3"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseBuildMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13c4af1e-32da-4346-a616-80760e6a06e1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseBuildMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad4eb1d9-b122-43df-a7c4-0836200f42a7"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenCraftingMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0928147f-a5e1-490d-a7da-785ce4e9a277"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseCraftingMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86a52a03-887e-4fe6-b3f1-aa75bc75db06"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseCraftingMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Newaction = m_Camera.FindAction("New action", throwIfNotFound: true);
        m_Camera_MousePosition = m_Camera.FindAction("MousePosition", throwIfNotFound: true);
        m_Camera_MouseDelta = m_Camera.FindAction("MouseDelta", throwIfNotFound: true);
        m_Camera_MoveCamera = m_Camera.FindAction("MoveCamera", throwIfNotFound: true);
        m_Camera_RotateCamera = m_Camera.FindAction("RotateCamera", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        // World
        m_World = asset.FindActionMap("World", throwIfNotFound: true);
        m_World_SelectOrCenter = m_World.FindAction("SelectOrCenter", throwIfNotFound: true);
        m_World_Deselect = m_World.FindAction("Deselect", throwIfNotFound: true);
        // Build
        m_Build = asset.FindActionMap("Build", throwIfNotFound: true);
        m_Build_DeselectBuilding = m_Build.FindAction("DeselectBuilding", throwIfNotFound: true);
        m_Build_RotateBuilding = m_Build.FindAction("RotateBuilding", throwIfNotFound: true);
        m_Build_SnapBuilding = m_Build.FindAction("SnapBuilding", throwIfNotFound: true);
        m_Build_PlaceBuilding = m_Build.FindAction("PlaceBuilding", throwIfNotFound: true);
        // Quit
        m_Quit = asset.FindActionMap("Quit", throwIfNotFound: true);
        m_Quit_Quit = m_Quit.FindAction("Quit", throwIfNotFound: true);
        // InventoryMenu
        m_InventoryMenu = asset.FindActionMap("InventoryMenu", throwIfNotFound: true);
        m_InventoryMenu_OpenInventory = m_InventoryMenu.FindAction("OpenInventory", throwIfNotFound: true);
        m_InventoryMenu_CloseInventory = m_InventoryMenu.FindAction("CloseInventory", throwIfNotFound: true);
        // BuildCraftingMenus
        m_BuildCraftingMenus = asset.FindActionMap("BuildCraftingMenus", throwIfNotFound: true);
        m_BuildCraftingMenus_OpenBuildMenu = m_BuildCraftingMenus.FindAction("OpenBuildMenu", throwIfNotFound: true);
        m_BuildCraftingMenus_CloseBuildMenu = m_BuildCraftingMenus.FindAction("CloseBuildMenu", throwIfNotFound: true);
        m_BuildCraftingMenus_OpenCraftingMenu = m_BuildCraftingMenus.FindAction("OpenCraftingMenu", throwIfNotFound: true);
        m_BuildCraftingMenus_CloseCraftingMenu = m_BuildCraftingMenus.FindAction("CloseCraftingMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Newaction;
    private readonly InputAction m_Camera_MousePosition;
    private readonly InputAction m_Camera_MouseDelta;
    private readonly InputAction m_Camera_MoveCamera;
    private readonly InputAction m_Camera_RotateCamera;
    private readonly InputAction m_Camera_Zoom;
    public struct CameraActions
    {
        private @PlayerControls m_Wrapper;
        public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Camera_Newaction;
        public InputAction @MousePosition => m_Wrapper.m_Camera_MousePosition;
        public InputAction @MouseDelta => m_Wrapper.m_Camera_MouseDelta;
        public InputAction @MoveCamera => m_Wrapper.m_Camera_MoveCamera;
        public InputAction @RotateCamera => m_Wrapper.m_Camera_RotateCamera;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnNewaction;
                @MousePosition.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePosition;
                @MouseDelta.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseDelta;
                @MoveCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveCamera;
                @RotateCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // World
    private readonly InputActionMap m_World;
    private IWorldActions m_WorldActionsCallbackInterface;
    private readonly InputAction m_World_SelectOrCenter;
    private readonly InputAction m_World_Deselect;
    public struct WorldActions
    {
        private @PlayerControls m_Wrapper;
        public WorldActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectOrCenter => m_Wrapper.m_World_SelectOrCenter;
        public InputAction @Deselect => m_Wrapper.m_World_Deselect;
        public InputActionMap Get() { return m_Wrapper.m_World; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldActions set) { return set.Get(); }
        public void SetCallbacks(IWorldActions instance)
        {
            if (m_Wrapper.m_WorldActionsCallbackInterface != null)
            {
                @SelectOrCenter.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnSelectOrCenter;
                @SelectOrCenter.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnSelectOrCenter;
                @SelectOrCenter.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnSelectOrCenter;
                @Deselect.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnDeselect;
                @Deselect.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnDeselect;
                @Deselect.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnDeselect;
            }
            m_Wrapper.m_WorldActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SelectOrCenter.started += instance.OnSelectOrCenter;
                @SelectOrCenter.performed += instance.OnSelectOrCenter;
                @SelectOrCenter.canceled += instance.OnSelectOrCenter;
                @Deselect.started += instance.OnDeselect;
                @Deselect.performed += instance.OnDeselect;
                @Deselect.canceled += instance.OnDeselect;
            }
        }
    }
    public WorldActions @World => new WorldActions(this);

    // Build
    private readonly InputActionMap m_Build;
    private IBuildActions m_BuildActionsCallbackInterface;
    private readonly InputAction m_Build_DeselectBuilding;
    private readonly InputAction m_Build_RotateBuilding;
    private readonly InputAction m_Build_SnapBuilding;
    private readonly InputAction m_Build_PlaceBuilding;
    public struct BuildActions
    {
        private @PlayerControls m_Wrapper;
        public BuildActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DeselectBuilding => m_Wrapper.m_Build_DeselectBuilding;
        public InputAction @RotateBuilding => m_Wrapper.m_Build_RotateBuilding;
        public InputAction @SnapBuilding => m_Wrapper.m_Build_SnapBuilding;
        public InputAction @PlaceBuilding => m_Wrapper.m_Build_PlaceBuilding;
        public InputActionMap Get() { return m_Wrapper.m_Build; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildActions set) { return set.Get(); }
        public void SetCallbacks(IBuildActions instance)
        {
            if (m_Wrapper.m_BuildActionsCallbackInterface != null)
            {
                @DeselectBuilding.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnDeselectBuilding;
                @DeselectBuilding.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnDeselectBuilding;
                @DeselectBuilding.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnDeselectBuilding;
                @RotateBuilding.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotateBuilding;
                @RotateBuilding.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotateBuilding;
                @RotateBuilding.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnRotateBuilding;
                @SnapBuilding.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnSnapBuilding;
                @SnapBuilding.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnSnapBuilding;
                @SnapBuilding.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnSnapBuilding;
                @PlaceBuilding.started -= m_Wrapper.m_BuildActionsCallbackInterface.OnPlaceBuilding;
                @PlaceBuilding.performed -= m_Wrapper.m_BuildActionsCallbackInterface.OnPlaceBuilding;
                @PlaceBuilding.canceled -= m_Wrapper.m_BuildActionsCallbackInterface.OnPlaceBuilding;
            }
            m_Wrapper.m_BuildActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DeselectBuilding.started += instance.OnDeselectBuilding;
                @DeselectBuilding.performed += instance.OnDeselectBuilding;
                @DeselectBuilding.canceled += instance.OnDeselectBuilding;
                @RotateBuilding.started += instance.OnRotateBuilding;
                @RotateBuilding.performed += instance.OnRotateBuilding;
                @RotateBuilding.canceled += instance.OnRotateBuilding;
                @SnapBuilding.started += instance.OnSnapBuilding;
                @SnapBuilding.performed += instance.OnSnapBuilding;
                @SnapBuilding.canceled += instance.OnSnapBuilding;
                @PlaceBuilding.started += instance.OnPlaceBuilding;
                @PlaceBuilding.performed += instance.OnPlaceBuilding;
                @PlaceBuilding.canceled += instance.OnPlaceBuilding;
            }
        }
    }
    public BuildActions @Build => new BuildActions(this);

    // Quit
    private readonly InputActionMap m_Quit;
    private IQuitActions m_QuitActionsCallbackInterface;
    private readonly InputAction m_Quit_Quit;
    public struct QuitActions
    {
        private @PlayerControls m_Wrapper;
        public QuitActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_Quit_Quit;
        public InputActionMap Get() { return m_Wrapper.m_Quit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(QuitActions set) { return set.Get(); }
        public void SetCallbacks(IQuitActions instance)
        {
            if (m_Wrapper.m_QuitActionsCallbackInterface != null)
            {
                @Quit.started -= m_Wrapper.m_QuitActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_QuitActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_QuitActionsCallbackInterface.OnQuit;
            }
            m_Wrapper.m_QuitActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
            }
        }
    }
    public QuitActions @Quit => new QuitActions(this);

    // InventoryMenu
    private readonly InputActionMap m_InventoryMenu;
    private IInventoryMenuActions m_InventoryMenuActionsCallbackInterface;
    private readonly InputAction m_InventoryMenu_OpenInventory;
    private readonly InputAction m_InventoryMenu_CloseInventory;
    public struct InventoryMenuActions
    {
        private @PlayerControls m_Wrapper;
        public InventoryMenuActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenInventory => m_Wrapper.m_InventoryMenu_OpenInventory;
        public InputAction @CloseInventory => m_Wrapper.m_InventoryMenu_CloseInventory;
        public InputActionMap Get() { return m_Wrapper.m_InventoryMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryMenuActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryMenuActions instance)
        {
            if (m_Wrapper.m_InventoryMenuActionsCallbackInterface != null)
            {
                @OpenInventory.started -= m_Wrapper.m_InventoryMenuActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.performed -= m_Wrapper.m_InventoryMenuActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.canceled -= m_Wrapper.m_InventoryMenuActionsCallbackInterface.OnOpenInventory;
                @CloseInventory.started -= m_Wrapper.m_InventoryMenuActionsCallbackInterface.OnCloseInventory;
                @CloseInventory.performed -= m_Wrapper.m_InventoryMenuActionsCallbackInterface.OnCloseInventory;
                @CloseInventory.canceled -= m_Wrapper.m_InventoryMenuActionsCallbackInterface.OnCloseInventory;
            }
            m_Wrapper.m_InventoryMenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
                @CloseInventory.started += instance.OnCloseInventory;
                @CloseInventory.performed += instance.OnCloseInventory;
                @CloseInventory.canceled += instance.OnCloseInventory;
            }
        }
    }
    public InventoryMenuActions @InventoryMenu => new InventoryMenuActions(this);

    // BuildCraftingMenus
    private readonly InputActionMap m_BuildCraftingMenus;
    private IBuildCraftingMenusActions m_BuildCraftingMenusActionsCallbackInterface;
    private readonly InputAction m_BuildCraftingMenus_OpenBuildMenu;
    private readonly InputAction m_BuildCraftingMenus_CloseBuildMenu;
    private readonly InputAction m_BuildCraftingMenus_OpenCraftingMenu;
    private readonly InputAction m_BuildCraftingMenus_CloseCraftingMenu;
    public struct BuildCraftingMenusActions
    {
        private @PlayerControls m_Wrapper;
        public BuildCraftingMenusActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenBuildMenu => m_Wrapper.m_BuildCraftingMenus_OpenBuildMenu;
        public InputAction @CloseBuildMenu => m_Wrapper.m_BuildCraftingMenus_CloseBuildMenu;
        public InputAction @OpenCraftingMenu => m_Wrapper.m_BuildCraftingMenus_OpenCraftingMenu;
        public InputAction @CloseCraftingMenu => m_Wrapper.m_BuildCraftingMenus_CloseCraftingMenu;
        public InputActionMap Get() { return m_Wrapper.m_BuildCraftingMenus; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildCraftingMenusActions set) { return set.Get(); }
        public void SetCallbacks(IBuildCraftingMenusActions instance)
        {
            if (m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface != null)
            {
                @OpenBuildMenu.started -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnOpenBuildMenu;
                @OpenBuildMenu.performed -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnOpenBuildMenu;
                @OpenBuildMenu.canceled -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnOpenBuildMenu;
                @CloseBuildMenu.started -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnCloseBuildMenu;
                @CloseBuildMenu.performed -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnCloseBuildMenu;
                @CloseBuildMenu.canceled -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnCloseBuildMenu;
                @OpenCraftingMenu.started -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnOpenCraftingMenu;
                @OpenCraftingMenu.performed -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnOpenCraftingMenu;
                @OpenCraftingMenu.canceled -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnOpenCraftingMenu;
                @CloseCraftingMenu.started -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnCloseCraftingMenu;
                @CloseCraftingMenu.performed -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnCloseCraftingMenu;
                @CloseCraftingMenu.canceled -= m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface.OnCloseCraftingMenu;
            }
            m_Wrapper.m_BuildCraftingMenusActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenBuildMenu.started += instance.OnOpenBuildMenu;
                @OpenBuildMenu.performed += instance.OnOpenBuildMenu;
                @OpenBuildMenu.canceled += instance.OnOpenBuildMenu;
                @CloseBuildMenu.started += instance.OnCloseBuildMenu;
                @CloseBuildMenu.performed += instance.OnCloseBuildMenu;
                @CloseBuildMenu.canceled += instance.OnCloseBuildMenu;
                @OpenCraftingMenu.started += instance.OnOpenCraftingMenu;
                @OpenCraftingMenu.performed += instance.OnOpenCraftingMenu;
                @OpenCraftingMenu.canceled += instance.OnOpenCraftingMenu;
                @CloseCraftingMenu.started += instance.OnCloseCraftingMenu;
                @CloseCraftingMenu.performed += instance.OnCloseCraftingMenu;
                @CloseCraftingMenu.canceled += instance.OnCloseCraftingMenu;
            }
        }
    }
    public BuildCraftingMenusActions @BuildCraftingMenus => new BuildCraftingMenusActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface ICameraActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IWorldActions
    {
        void OnSelectOrCenter(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
    }
    public interface IBuildActions
    {
        void OnDeselectBuilding(InputAction.CallbackContext context);
        void OnRotateBuilding(InputAction.CallbackContext context);
        void OnSnapBuilding(InputAction.CallbackContext context);
        void OnPlaceBuilding(InputAction.CallbackContext context);
    }
    public interface IQuitActions
    {
        void OnQuit(InputAction.CallbackContext context);
    }
    public interface IInventoryMenuActions
    {
        void OnOpenInventory(InputAction.CallbackContext context);
        void OnCloseInventory(InputAction.CallbackContext context);
    }
    public interface IBuildCraftingMenusActions
    {
        void OnOpenBuildMenu(InputAction.CallbackContext context);
        void OnCloseBuildMenu(InputAction.CallbackContext context);
        void OnOpenCraftingMenu(InputAction.CallbackContext context);
        void OnCloseCraftingMenu(InputAction.CallbackContext context);
    }
}
