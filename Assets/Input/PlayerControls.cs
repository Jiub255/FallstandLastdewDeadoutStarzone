//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""World"",
            ""id"": ""333d6583-af7b-4463-bb89-dc12b7cdb113"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""baed4c61-a25a-48d5-9229-2e85db2aa572"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""a58ac3f4-56d5-400d-b22d-ad57fe463cc9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""9edbcbaa-872b-49b3-8825-d02ca337afa4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Button"",
                    ""id"": ""0a85a7f5-8298-4586-9582-e82604368b0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""699202fd-6004-470e-b980-0250f206d4a7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""56ab4e61-b5a9-40d5-9004-97d5ba5ca6c7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""a2a35609-70b1-430a-a1e3-a0f264287da5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c6ed99f4-a18c-4add-857f-63d58557685b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c64bb0b5-5e92-4704-a4af-c58abb6d42ee"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""be40560c-6a17-4545-ba54-4471620ffc42"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bf5789aa-eb84-427b-9132-e912e160428a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""370e04e2-d978-45de-aa8c-b0cafc1f37d2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3914d097-09dc-4439-a6d9-6fcaa5ecc208"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d4e286cf-ed9b-4e06-afa3-bb452cfc09b8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9f0cc468-d053-4821-bd06-19c477abf1d3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7d409d26-d8a7-48a5-8d10-f952cbf8861e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a43dc905-ec2a-4ded-9665-5fc1350a275d"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deccd75d-f5fc-4f59-8420-48591e6d9f6e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5444e528-fdcd-4136-9ed7-2ffdb52ebec7"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WorldGameplay"",
            ""id"": ""feae97ab-c7a4-4c60-bc91-75b13cce064c"",
            ""actions"": [
                {
                    ""name"": ""DragCamera"",
                    ""type"": ""Button"",
                    ""id"": ""34ab1db9-84b3-424f-80d0-941b6c44abee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f045acb-35d0-462e-8dd2-854026918335"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""DragCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WorldBuild"",
            ""id"": ""56cb6db7-c3d5-4d97-b886-7279867bfbdd"",
            ""actions"": [
                {
                    ""name"": ""DeselectBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""a5e667eb-bed4-42cb-b3ec-7c9db8b47a0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""9a3e82be-af03-4d90-b3bf-0f4dcf47a75d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SnapBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""be286cfd-8a5a-4666-899c-38e5458e7d98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a077c862-2d2e-48ec-a061-8f48ad4fd088"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""DeselectBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cd78c3d9-8c49-4316-bb61-dec5f2d3dde2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBuilding"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""923ebce1-6931-4af6-9959-3169c489d14e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""RotateBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""94a04d72-9ace-4bb1-b8de-1b504592aebd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""RotateBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1decab37-605a-4a8b-bd66-589966450faa"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""SnapBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Home"",
            ""id"": ""cebf6a23-b35c-43ac-913b-4269ea46e868"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""fc8a4de9-0d64-48d2-9e04-cdebc63c212e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""9ae00dde-277e-4ed9-8bb1-31da03bda281"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""64692471-2c71-404d-a7ce-de47180ed6c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenBuildMenu"",
                    ""type"": ""Button"",
                    ""id"": ""249a3345-0b90-4dc5-97e7-bf272e72621b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b7c40f53-6c61-4834-bbda-422f74136069"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a47a37dd-8f68-4fa4-8baa-7387cc8ece2a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6bfc5e6-c49f-43e2-bf5d-6de971cfeca7"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenBuildMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3004cdc7-f928-4855-a29a-86e7b4cb7737"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Scavenge"",
            ""id"": ""5debe4a9-3f23-4f63-bf74-91675f5ba518"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""efe24902-6c62-4e00-9f5b-eaff4697d095"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""4bdfc87c-a81d-4667-8f16-e8fef504f672"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenCharacterStatus"",
                    ""type"": ""Button"",
                    ""id"": ""3ead7c23-d160-4985-928e-e7c8d5733666"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenUsableInventory"",
                    ""type"": ""Button"",
                    ""id"": ""8cac9631-2fc2-4d9e-8783-640ef0f21b57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e691646-0734-4133-8a30-d336e35a108d"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenCharacterStatus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5e543b6-6baf-4aa4-90e2-6d6d923a3f95"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1baf79f-8729-4e5e-accf-b7688326ea72"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenUsableInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bcbc636-a328-48bb-92ca-798f189d1830"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuInventory"",
            ""id"": ""8dde6780-e02e-4062-a266-3e0686d2a002"",
            ""actions"": [
                {
                    ""name"": ""CloseInventory"",
                    ""type"": ""Button"",
                    ""id"": ""da773435-6846-4ed8-80e5-f9b8415966f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenBuildMenu"",
                    ""type"": ""Button"",
                    ""id"": ""b18c594a-eb85-4f8b-9eb5-7fce37bc74ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7425b8c1-cd34-4701-9702-7ce8e8ab7b39"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df104299-a0fd-45f2-96d1-9b1bbc9d518a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9da20f26-8402-409d-8b99-615ec59a1350"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenBuildMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuBuild"",
            ""id"": ""e1054432-fc96-4adc-90c2-a02c236d23ad"",
            ""actions"": [
                {
                    ""name"": ""PlaceBuilding"",
                    ""type"": ""Button"",
                    ""id"": ""ac833c21-78fc-4b46-8733-1f5ff4b98259"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseBuildMenu"",
                    ""type"": ""Button"",
                    ""id"": ""7154093c-2ce0-4f7f-831e-88a73304e669"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""f2573d91-4d74-48ae-aeb5-53914fb1f639"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""50ca54eb-52d4-4a54-b403-8e84b990b7fc"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseBuildMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ad8889d-b60d-452a-ad7b-b66c83f72545"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CloseBuildMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23a489d5-5fcb-4659-8d8c-44bf875a237b"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db92ee87-c95d-42c1-8e4d-24f9d6300587"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""PlaceBuilding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // World
        m_World = asset.FindActionMap("World", throwIfNotFound: true);
        m_World_MousePosition = m_World.FindAction("MousePosition", throwIfNotFound: true);
        m_World_MouseDelta = m_World.FindAction("MouseDelta", throwIfNotFound: true);
        m_World_MoveCamera = m_World.FindAction("MoveCamera", throwIfNotFound: true);
        m_World_RotateCamera = m_World.FindAction("RotateCamera", throwIfNotFound: true);
        m_World_Zoom = m_World.FindAction("Zoom", throwIfNotFound: true);
        // WorldGameplay
        m_WorldGameplay = asset.FindActionMap("WorldGameplay", throwIfNotFound: true);
        m_WorldGameplay_DragCamera = m_WorldGameplay.FindAction("DragCamera", throwIfNotFound: true);
        // WorldBuild
        m_WorldBuild = asset.FindActionMap("WorldBuild", throwIfNotFound: true);
        m_WorldBuild_DeselectBuilding = m_WorldBuild.FindAction("DeselectBuilding", throwIfNotFound: true);
        m_WorldBuild_RotateBuilding = m_WorldBuild.FindAction("RotateBuilding", throwIfNotFound: true);
        m_WorldBuild_SnapBuilding = m_WorldBuild.FindAction("SnapBuilding", throwIfNotFound: true);
        // Home
        m_Home = asset.FindActionMap("Home", throwIfNotFound: true);
        m_Home_Select = m_Home.FindAction("Select", throwIfNotFound: true);
        m_Home_Deselect = m_Home.FindAction("Deselect", throwIfNotFound: true);
        m_Home_OpenInventory = m_Home.FindAction("OpenInventory", throwIfNotFound: true);
        m_Home_OpenBuildMenu = m_Home.FindAction("OpenBuildMenu", throwIfNotFound: true);
        // Scavenge
        m_Scavenge = asset.FindActionMap("Scavenge", throwIfNotFound: true);
        m_Scavenge_Select = m_Scavenge.FindAction("Select", throwIfNotFound: true);
        m_Scavenge_Deselect = m_Scavenge.FindAction("Deselect", throwIfNotFound: true);
        m_Scavenge_OpenCharacterStatus = m_Scavenge.FindAction("OpenCharacterStatus", throwIfNotFound: true);
        m_Scavenge_OpenUsableInventory = m_Scavenge.FindAction("OpenUsableInventory", throwIfNotFound: true);
        // MenuInventory
        m_MenuInventory = asset.FindActionMap("MenuInventory", throwIfNotFound: true);
        m_MenuInventory_CloseInventory = m_MenuInventory.FindAction("CloseInventory", throwIfNotFound: true);
        m_MenuInventory_OpenBuildMenu = m_MenuInventory.FindAction("OpenBuildMenu", throwIfNotFound: true);
        // MenuBuild
        m_MenuBuild = asset.FindActionMap("MenuBuild", throwIfNotFound: true);
        m_MenuBuild_PlaceBuilding = m_MenuBuild.FindAction("PlaceBuilding", throwIfNotFound: true);
        m_MenuBuild_CloseBuildMenu = m_MenuBuild.FindAction("CloseBuildMenu", throwIfNotFound: true);
        m_MenuBuild_OpenInventory = m_MenuBuild.FindAction("OpenInventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // World
    private readonly InputActionMap m_World;
    private IWorldActions m_WorldActionsCallbackInterface;
    private readonly InputAction m_World_MousePosition;
    private readonly InputAction m_World_MouseDelta;
    private readonly InputAction m_World_MoveCamera;
    private readonly InputAction m_World_RotateCamera;
    private readonly InputAction m_World_Zoom;
    public struct WorldActions
    {
        private @PlayerControls m_Wrapper;
        public WorldActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_World_MousePosition;
        public InputAction @MouseDelta => m_Wrapper.m_World_MouseDelta;
        public InputAction @MoveCamera => m_Wrapper.m_World_MoveCamera;
        public InputAction @RotateCamera => m_Wrapper.m_World_RotateCamera;
        public InputAction @Zoom => m_Wrapper.m_World_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_World; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldActions set) { return set.Get(); }
        public void SetCallbacks(IWorldActions instance)
        {
            if (m_Wrapper.m_WorldActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnMousePosition;
                @MouseDelta.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnMouseDelta;
                @MoveCamera.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnMoveCamera;
                @RotateCamera.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnRotateCamera;
                @Zoom.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_WorldActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public WorldActions @World => new WorldActions(this);

    // WorldGameplay
    private readonly InputActionMap m_WorldGameplay;
    private IWorldGameplayActions m_WorldGameplayActionsCallbackInterface;
    private readonly InputAction m_WorldGameplay_DragCamera;
    public struct WorldGameplayActions
    {
        private @PlayerControls m_Wrapper;
        public WorldGameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragCamera => m_Wrapper.m_WorldGameplay_DragCamera;
        public InputActionMap Get() { return m_Wrapper.m_WorldGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldGameplayActions set) { return set.Get(); }
        public void SetCallbacks(IWorldGameplayActions instance)
        {
            if (m_Wrapper.m_WorldGameplayActionsCallbackInterface != null)
            {
                @DragCamera.started -= m_Wrapper.m_WorldGameplayActionsCallbackInterface.OnDragCamera;
                @DragCamera.performed -= m_Wrapper.m_WorldGameplayActionsCallbackInterface.OnDragCamera;
                @DragCamera.canceled -= m_Wrapper.m_WorldGameplayActionsCallbackInterface.OnDragCamera;
            }
            m_Wrapper.m_WorldGameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DragCamera.started += instance.OnDragCamera;
                @DragCamera.performed += instance.OnDragCamera;
                @DragCamera.canceled += instance.OnDragCamera;
            }
        }
    }
    public WorldGameplayActions @WorldGameplay => new WorldGameplayActions(this);

    // WorldBuild
    private readonly InputActionMap m_WorldBuild;
    private IWorldBuildActions m_WorldBuildActionsCallbackInterface;
    private readonly InputAction m_WorldBuild_DeselectBuilding;
    private readonly InputAction m_WorldBuild_RotateBuilding;
    private readonly InputAction m_WorldBuild_SnapBuilding;
    public struct WorldBuildActions
    {
        private @PlayerControls m_Wrapper;
        public WorldBuildActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DeselectBuilding => m_Wrapper.m_WorldBuild_DeselectBuilding;
        public InputAction @RotateBuilding => m_Wrapper.m_WorldBuild_RotateBuilding;
        public InputAction @SnapBuilding => m_Wrapper.m_WorldBuild_SnapBuilding;
        public InputActionMap Get() { return m_Wrapper.m_WorldBuild; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldBuildActions set) { return set.Get(); }
        public void SetCallbacks(IWorldBuildActions instance)
        {
            if (m_Wrapper.m_WorldBuildActionsCallbackInterface != null)
            {
                @DeselectBuilding.started -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnDeselectBuilding;
                @DeselectBuilding.performed -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnDeselectBuilding;
                @DeselectBuilding.canceled -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnDeselectBuilding;
                @RotateBuilding.started -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnRotateBuilding;
                @RotateBuilding.performed -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnRotateBuilding;
                @RotateBuilding.canceled -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnRotateBuilding;
                @SnapBuilding.started -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnSnapBuilding;
                @SnapBuilding.performed -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnSnapBuilding;
                @SnapBuilding.canceled -= m_Wrapper.m_WorldBuildActionsCallbackInterface.OnSnapBuilding;
            }
            m_Wrapper.m_WorldBuildActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DeselectBuilding.started += instance.OnDeselectBuilding;
                @DeselectBuilding.performed += instance.OnDeselectBuilding;
                @DeselectBuilding.canceled += instance.OnDeselectBuilding;
                @RotateBuilding.started += instance.OnRotateBuilding;
                @RotateBuilding.performed += instance.OnRotateBuilding;
                @RotateBuilding.canceled += instance.OnRotateBuilding;
                @SnapBuilding.started += instance.OnSnapBuilding;
                @SnapBuilding.performed += instance.OnSnapBuilding;
                @SnapBuilding.canceled += instance.OnSnapBuilding;
            }
        }
    }
    public WorldBuildActions @WorldBuild => new WorldBuildActions(this);

    // Home
    private readonly InputActionMap m_Home;
    private IHomeActions m_HomeActionsCallbackInterface;
    private readonly InputAction m_Home_Select;
    private readonly InputAction m_Home_Deselect;
    private readonly InputAction m_Home_OpenInventory;
    private readonly InputAction m_Home_OpenBuildMenu;
    public struct HomeActions
    {
        private @PlayerControls m_Wrapper;
        public HomeActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Home_Select;
        public InputAction @Deselect => m_Wrapper.m_Home_Deselect;
        public InputAction @OpenInventory => m_Wrapper.m_Home_OpenInventory;
        public InputAction @OpenBuildMenu => m_Wrapper.m_Home_OpenBuildMenu;
        public InputActionMap Get() { return m_Wrapper.m_Home; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HomeActions set) { return set.Get(); }
        public void SetCallbacks(IHomeActions instance)
        {
            if (m_Wrapper.m_HomeActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_HomeActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_HomeActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_HomeActionsCallbackInterface.OnSelect;
                @Deselect.started -= m_Wrapper.m_HomeActionsCallbackInterface.OnDeselect;
                @Deselect.performed -= m_Wrapper.m_HomeActionsCallbackInterface.OnDeselect;
                @Deselect.canceled -= m_Wrapper.m_HomeActionsCallbackInterface.OnDeselect;
                @OpenInventory.started -= m_Wrapper.m_HomeActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.performed -= m_Wrapper.m_HomeActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.canceled -= m_Wrapper.m_HomeActionsCallbackInterface.OnOpenInventory;
                @OpenBuildMenu.started -= m_Wrapper.m_HomeActionsCallbackInterface.OnOpenBuildMenu;
                @OpenBuildMenu.performed -= m_Wrapper.m_HomeActionsCallbackInterface.OnOpenBuildMenu;
                @OpenBuildMenu.canceled -= m_Wrapper.m_HomeActionsCallbackInterface.OnOpenBuildMenu;
            }
            m_Wrapper.m_HomeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Deselect.started += instance.OnDeselect;
                @Deselect.performed += instance.OnDeselect;
                @Deselect.canceled += instance.OnDeselect;
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
                @OpenBuildMenu.started += instance.OnOpenBuildMenu;
                @OpenBuildMenu.performed += instance.OnOpenBuildMenu;
                @OpenBuildMenu.canceled += instance.OnOpenBuildMenu;
            }
        }
    }
    public HomeActions @Home => new HomeActions(this);

    // Scavenge
    private readonly InputActionMap m_Scavenge;
    private IScavengeActions m_ScavengeActionsCallbackInterface;
    private readonly InputAction m_Scavenge_Select;
    private readonly InputAction m_Scavenge_Deselect;
    private readonly InputAction m_Scavenge_OpenCharacterStatus;
    private readonly InputAction m_Scavenge_OpenUsableInventory;
    public struct ScavengeActions
    {
        private @PlayerControls m_Wrapper;
        public ScavengeActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Scavenge_Select;
        public InputAction @Deselect => m_Wrapper.m_Scavenge_Deselect;
        public InputAction @OpenCharacterStatus => m_Wrapper.m_Scavenge_OpenCharacterStatus;
        public InputAction @OpenUsableInventory => m_Wrapper.m_Scavenge_OpenUsableInventory;
        public InputActionMap Get() { return m_Wrapper.m_Scavenge; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScavengeActions set) { return set.Get(); }
        public void SetCallbacks(IScavengeActions instance)
        {
            if (m_Wrapper.m_ScavengeActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnSelect;
                @Deselect.started -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnDeselect;
                @Deselect.performed -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnDeselect;
                @Deselect.canceled -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnDeselect;
                @OpenCharacterStatus.started -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnOpenCharacterStatus;
                @OpenCharacterStatus.performed -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnOpenCharacterStatus;
                @OpenCharacterStatus.canceled -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnOpenCharacterStatus;
                @OpenUsableInventory.started -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnOpenUsableInventory;
                @OpenUsableInventory.performed -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnOpenUsableInventory;
                @OpenUsableInventory.canceled -= m_Wrapper.m_ScavengeActionsCallbackInterface.OnOpenUsableInventory;
            }
            m_Wrapper.m_ScavengeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Deselect.started += instance.OnDeselect;
                @Deselect.performed += instance.OnDeselect;
                @Deselect.canceled += instance.OnDeselect;
                @OpenCharacterStatus.started += instance.OnOpenCharacterStatus;
                @OpenCharacterStatus.performed += instance.OnOpenCharacterStatus;
                @OpenCharacterStatus.canceled += instance.OnOpenCharacterStatus;
                @OpenUsableInventory.started += instance.OnOpenUsableInventory;
                @OpenUsableInventory.performed += instance.OnOpenUsableInventory;
                @OpenUsableInventory.canceled += instance.OnOpenUsableInventory;
            }
        }
    }
    public ScavengeActions @Scavenge => new ScavengeActions(this);

    // MenuInventory
    private readonly InputActionMap m_MenuInventory;
    private IMenuInventoryActions m_MenuInventoryActionsCallbackInterface;
    private readonly InputAction m_MenuInventory_CloseInventory;
    private readonly InputAction m_MenuInventory_OpenBuildMenu;
    public struct MenuInventoryActions
    {
        private @PlayerControls m_Wrapper;
        public MenuInventoryActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseInventory => m_Wrapper.m_MenuInventory_CloseInventory;
        public InputAction @OpenBuildMenu => m_Wrapper.m_MenuInventory_OpenBuildMenu;
        public InputActionMap Get() { return m_Wrapper.m_MenuInventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuInventoryActions set) { return set.Get(); }
        public void SetCallbacks(IMenuInventoryActions instance)
        {
            if (m_Wrapper.m_MenuInventoryActionsCallbackInterface != null)
            {
                @CloseInventory.started -= m_Wrapper.m_MenuInventoryActionsCallbackInterface.OnCloseInventory;
                @CloseInventory.performed -= m_Wrapper.m_MenuInventoryActionsCallbackInterface.OnCloseInventory;
                @CloseInventory.canceled -= m_Wrapper.m_MenuInventoryActionsCallbackInterface.OnCloseInventory;
                @OpenBuildMenu.started -= m_Wrapper.m_MenuInventoryActionsCallbackInterface.OnOpenBuildMenu;
                @OpenBuildMenu.performed -= m_Wrapper.m_MenuInventoryActionsCallbackInterface.OnOpenBuildMenu;
                @OpenBuildMenu.canceled -= m_Wrapper.m_MenuInventoryActionsCallbackInterface.OnOpenBuildMenu;
            }
            m_Wrapper.m_MenuInventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CloseInventory.started += instance.OnCloseInventory;
                @CloseInventory.performed += instance.OnCloseInventory;
                @CloseInventory.canceled += instance.OnCloseInventory;
                @OpenBuildMenu.started += instance.OnOpenBuildMenu;
                @OpenBuildMenu.performed += instance.OnOpenBuildMenu;
                @OpenBuildMenu.canceled += instance.OnOpenBuildMenu;
            }
        }
    }
    public MenuInventoryActions @MenuInventory => new MenuInventoryActions(this);

    // MenuBuild
    private readonly InputActionMap m_MenuBuild;
    private IMenuBuildActions m_MenuBuildActionsCallbackInterface;
    private readonly InputAction m_MenuBuild_PlaceBuilding;
    private readonly InputAction m_MenuBuild_CloseBuildMenu;
    private readonly InputAction m_MenuBuild_OpenInventory;
    public struct MenuBuildActions
    {
        private @PlayerControls m_Wrapper;
        public MenuBuildActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlaceBuilding => m_Wrapper.m_MenuBuild_PlaceBuilding;
        public InputAction @CloseBuildMenu => m_Wrapper.m_MenuBuild_CloseBuildMenu;
        public InputAction @OpenInventory => m_Wrapper.m_MenuBuild_OpenInventory;
        public InputActionMap Get() { return m_Wrapper.m_MenuBuild; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuBuildActions set) { return set.Get(); }
        public void SetCallbacks(IMenuBuildActions instance)
        {
            if (m_Wrapper.m_MenuBuildActionsCallbackInterface != null)
            {
                @PlaceBuilding.started -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnPlaceBuilding;
                @PlaceBuilding.performed -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnPlaceBuilding;
                @PlaceBuilding.canceled -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnPlaceBuilding;
                @CloseBuildMenu.started -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnCloseBuildMenu;
                @CloseBuildMenu.performed -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnCloseBuildMenu;
                @CloseBuildMenu.canceled -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnCloseBuildMenu;
                @OpenInventory.started -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.performed -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnOpenInventory;
                @OpenInventory.canceled -= m_Wrapper.m_MenuBuildActionsCallbackInterface.OnOpenInventory;
            }
            m_Wrapper.m_MenuBuildActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlaceBuilding.started += instance.OnPlaceBuilding;
                @PlaceBuilding.performed += instance.OnPlaceBuilding;
                @PlaceBuilding.canceled += instance.OnPlaceBuilding;
                @CloseBuildMenu.started += instance.OnCloseBuildMenu;
                @CloseBuildMenu.performed += instance.OnCloseBuildMenu;
                @CloseBuildMenu.canceled += instance.OnCloseBuildMenu;
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
            }
        }
    }
    public MenuBuildActions @MenuBuild => new MenuBuildActions(this);
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IWorldActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IWorldGameplayActions
    {
        void OnDragCamera(InputAction.CallbackContext context);
    }
    public interface IWorldBuildActions
    {
        void OnDeselectBuilding(InputAction.CallbackContext context);
        void OnRotateBuilding(InputAction.CallbackContext context);
        void OnSnapBuilding(InputAction.CallbackContext context);
    }
    public interface IHomeActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
        void OnOpenBuildMenu(InputAction.CallbackContext context);
    }
    public interface IScavengeActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
        void OnOpenCharacterStatus(InputAction.CallbackContext context);
        void OnOpenUsableInventory(InputAction.CallbackContext context);
    }
    public interface IMenuInventoryActions
    {
        void OnCloseInventory(InputAction.CallbackContext context);
        void OnOpenBuildMenu(InputAction.CallbackContext context);
    }
    public interface IMenuBuildActions
    {
        void OnPlaceBuilding(InputAction.CallbackContext context);
        void OnCloseBuildMenu(InputAction.CallbackContext context);
        void OnOpenInventory(InputAction.CallbackContext context);
    }
}
